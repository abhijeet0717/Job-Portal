import { Company } from "../models/company.model.js";
import cloudinary from "../utils/cloudinary.js";
import getDataUri from "../utils/datauri.js";
// import cloudinary from "../utils/cloudinary.js";


export const registerCompany = async (req, res) => {
    try {
        const { companyName } = req.body;
        if (!companyName) {
            return res.status(400).json({
                message: "Company name is required.",
                success: false
            });
        };
        let company = await Company.findOne({ name: companyName });

        if (company) {
            return res.status(400).json({
                message: "You can't add same company.",
                success: false
            })
        }
        company = await Company.create({
            name: companyName,
            userId: req.id//we get from the middleware isAuthenticated
        });
        return res.status(201).json({
            message: "Company registered successfully.",
            company,
            success: true
        })
    } catch (error) {
        console.log(error);
        return res.status(400).json({ error })
    }
}
export const getCompany = async (req, res) => {//give all company posted by that user
    try {
        const userId = req.id;
        const companies = await Company.find({ userId });//find as it can return multiple companies (findOne used to return only one company so findone is not used)
        // { userId } is equivalent to { userId: userId } and useId field is present in the company model
        //Company.findOne({ name: companyName }); as done above it is also same
        if (!companies) return res.status(404).json({ message: "company not found", success: false });
        return res.status(200).json({ companies });
    } catch (error) {
        console.log(error);
    }
}
export const getCompanyById = async (req, res) => {
    try {
        const companyId = req.params.id;//from the url /api/v1/company/getcompany/123456 123456 is the id of the company
        const company = await Company.findById(companyId);
        if (!company) return res.status(404).json({ message: "Company not found!", success: false });
        return res.status(200).json({
            company,
            success: true
        })
    } catch (error) {
        console.log(error);
    }
}
export const updateCompanyInformation = async (req, res) => {
    try {
        const { name, description, website, location } = req.body;
        const file = req.file; 
        const fileUri = getDataUri(file);
        const cloudResponse = await cloudinary.uploader.upload(fileUri.content);
        const logo = cloudResponse.secure_url;
        const updateData = { name, description, website, location , logo};
        //{
        //     name: name,
        //     description: description,
        //     website: website,
        //     location: location,
        //     logo: logo
        // } --> it look like this
        //and these are also the name of the fields in the company model



        //got the id from the url as used params.id (it is the id of the company generated by mongodb not userId)
        //router.route("/getcompany/:id").get( isAuthenticated ,getCompanyById);
        //id is available in the route 
        //so id is passed by frontend in the url  as frontend hit the api /api/v1/company/getcompany/123456
        //so 123456 is the id of the company passed by the fronetend

        //it find the company by id 
        //and update the company information with the updated data
        const company = await Company.findByIdAndUpdate(req.params.id, updateData, { new: true });//new : true so that it returns the updated data

        if (!company) {
            return res.status(404).json({ message: "Company not found!", success: false });
        }

        return res.status(200).json({
            message: "Company information updated.",
            success: true
        });
    } catch (error) {
        console.log(error);
        return res.status(500).json({
            message: "An error occurred while updating company information.",
            success: false
        });
    }
}
